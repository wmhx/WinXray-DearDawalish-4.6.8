//config 配置文件 
import fsys.config;
config  = fsys.config("/config/"); 


if(!config.proxy.mode) config.proxy.mode = "pac";
if(!config.proxy.pacPort) config.proxy.pacPort = 0;
if(config.proxy.useHttpGlobal === null){
	config.proxy.useHttpGlobal = true;
}
if(config.proxy.useSocksPac === null){
	config.proxy.useSocksPac = _WIN10_LATER;
}

if(config.proxy.enableGitConfigGithub === null){
	config.proxy.enableGitConfigGithub = true;
}

if(config.proxy.test === null){
	config.proxy.test = true;
}

if(config.settings.autoStartTest === null){
	config.settings.autoStartTest = true;
}

if(config.proxy.autoRefreshSubscription === null){
	config.proxy.autoRefreshSubscription = true;
}

if(!config.proxy.testInterval){
	config.proxy.testInterval = 15;
}

if(!config.proxy.maxTestServers){
	config.proxy.maxTestServers = 100;
}

if(!config.proxy.subscribeUrls){
	config.proxy.subscribeUrls = {
		fields =  {"";"checked";"ps";"url";}
	}
}

if(!config.proxy.hotkey){
	config.proxy.hotkey = {1/*_MOD_ALT*/|2/*_MOD_CONTROL*/|4/*_MOD_SHIFT*/;'P'#}
}

if(config.proxy.outbounds === null){
	config.proxy.outbounds = ..table.array();
}

config.__resetDefaultCore = function(){
	config.core.default =  {
		inbounds={
			{
				listen="127.0.0.1";
				port=0;
				protocol="socks";
				settings={
					auth="noauth";
					udp=true;
				};
				sniffing={
					destOverride={
						"http";
						"tls"
					};
					enabled=true
				};
				tag="proxy";
			}; 
			{
				listen="127.0.0.1";
				port=0;
				protocol="http";
				settings={};
				sniffing={
					destOverride={
						"http";
						"tls"
					};
					enabled=true
				};
				tag="http_proxy"
			}
		};
		log={
			access="";
			error="";
			loglevel="warning"
		};
		outbounds={
			{
				tag="proxy"
			};
			{
				protocol="freedom";
				settings={};
				tag="direct";
			};
			{
				protocol="blackhole";
				settings={
					response={
						type="http"
					};
				};
				tag="block";
			}
		};
		routing={
			domainStrategy="IPIfNonMatch";
			rules={
				{
					inboundTag={
						"api"
					};
					outboundTag="api";
					type="field";
				}
			}
		};
	}	
}

if(!config.core.default){
	config.__resetDefaultCore();
}

// 将core配置的json页面隐藏掉，就不可能会有删除第二个入站的可能了，那么这里就可以注释掉了
if(!config.core.default.inbounds[2]){
	config.core.default.inbounds[2]	= {
		listen="127.0.0.1";
		port=0;
		protocol="http";
		settings={};
		sniffing={
			destOverride={
				"http";
				"tls"
			};
			enabled=true
		};
		tag="http_proxy"
	}
}
