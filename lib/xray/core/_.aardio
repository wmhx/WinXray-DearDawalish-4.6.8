//内核进程
import xray.core.ssr;
import xray.core.naive;
import wsock.tcp.server;
import process.popen;
import config;

namespace xray.core;

socksProxyPort = null;
httpProxPort = null;

// 获取系统代理配置
getSystemProxyConfig = function(){
    if(!(socksProxyPort&&httpProxPort)){ return null; }
	return ..config.proxy.useHttpGlobal ? ("127.0.0.1:" + httpProxPort ): ("SOCKS=127.0.0.1:"+socksProxyPort)  
} 

// 判断入站端口是否被修改
isInboundPortChanged = function(){
	var inbounds = ..config.core.default.inbounds;
	// 如果inbounds不是数组或者数组长度小于2，则返回true，表示端口有变化
	// 屏蔽掉json界面后，这里应该也可以注释掉
	if(! (..table.isArray(inbounds) && inbounds[1] && inbounds[2]) ){
		return true;
	}	
	
	// 判断socksProxyPort和httpProxPort与配置文件中的端口是否相等
	// 只要有一个不一样，返回的就是false
	return (inbounds[1].port!=socksProxyPort) || (inbounds[2].port!=httpProxPort)
}

// xray进程
var prcsxray;
// xray启动中，注意最后需要置为false表示启动结束，否则再次选择节点时会失败
var xrayStarting;
import process.job.limitKill;
// 重启xray
restart = function(editor,outbound){
    if(!outbound){ return null,"错误的出站代理服务器配置"  }
    if(_WINXP){
    	return null,"抱歉！Xray Core 不支持 Windows XP, 仅支持 Windows 7, Windows 10 以及更新操作系统。";  
    }

	var inbounds = ..config.core.default[["inbounds"]];
	if(! (..table.isArray(inbounds) && inbounds[1] ) ){
		return null,"错误的入站SOCKS代理服务器配置" 
	}
	if(! ( inbounds[2] ) ){
		return null,"错误的入站HTTP代理服务器配置" 
	}

	if(xrayStarting){ return null,"不能重复启动 Xray Core"  } 
	xrayStarting = true;
	
	
	var corePath = getPath(editor.hwnd);
	if(!corePath){ 
		xrayStarting = false;
		return false,"启动失败,未找到 xray.exe"; 
	}  

	if( outbound.protocol == "ssr" ){ 
		if(!..xray.core.ssr.getPath(editor.hwnd)){
			xrayStarting = false;
			return false,"启动失败,未找到 SSR Core";
		}
	}
	if( outbound.protocol == "naive" ){ 
		if(!..xray.core.naive.getPath(editor.hwnd)){
			xrayStarting = false;
			return false,"启动失败,未找到 NaïveProxy Core";
		}
	}
	
	..publish("activeOutbound",false);
	
	import sysProxy;
	// reset，不使用代理
	..sysProxy.reset(false);

	socksProxyPort = inbounds[1].port;  
	httpProxPort = inbounds[2].port;
	// 49152是默认动态端口范围的开始端口，49152-65535
	// 如果没有设置端口，或者设置端口的是动态端口，那么就使用默认提供的端口（下面多个端口表示依次优先获取）
	if( (! socksProxyPort) || socksProxyPort >=  49152 ){ socksProxyPort = ..wsock.tcp.server.getFreePort("127.0.0.1",1081,10801,10811,44821)  }
	if( (! httpProxPort) || httpProxPort >=  49152 ){ httpProxPort = ..wsock.tcp.server.getFreePort("127.0.0.1",1082,10802,10812,44822) }
	
	// 停止各种core
	if(prcsxray){
		prcsxray.terminate();
		prcsxray = null;
	}
	
	..xray.core.ssr.stop();
	..xray.core.naive.stop();
	
	var nexCore;
	if( outbound.protocol == "ssr" ){  
		var nextProxyPort = ..wsock.getFreePort();
		if(!..xray.core.ssr.restart(editor,outbound,nextProxyPort)){
			xrayStarting = false;
			return false,"SSR Core 启动失败";
		}

		// 修改outbound变量，让xray的config.json中，outbound配置指向自己
		outbound = {
			protocol = "socks";
			address = "127.0.0.1";
			port = nextProxyPort;
		} 
		
		nexCore = ..xray.core.ssr;
	}
	elseif( outbound.protocol == "naive" ){  
		var nextProxyPort = ..wsock.getFreePort();
		if(!..xray.core.naive.restart(editor,outbound,nextProxyPort)){
			xrayStarting = false;
			return false,"Naive Core 启动失败";
		}

		// 修改outbound变量，让xray的config.json中，outbound配置指向自己
		outbound = {
			protocol = "socks";
			address = "127.0.0.1";
			port = nextProxyPort;
		} 
		
		nexCore = ..xray.core.naive;
	}

	// 启动程序时点击按钮，prcsxray为空，进入分支
	if( ! prcsxray ){ 
		import xray.core.configJson;
		// 生成xray的config.json文件
		var jsonPath,err = ..xray.core.configJson.write(
			..io.joinpath(..io.splitpath(corePath).dir,"config.json")
			,outbound,socksProxyPort,httpProxPort);
	
		if(!jsonPath){
			if( nexCore ){ nexCore.stop(); } 
			
			xrayStarting = false;
			return false,err:"启动失败,写入配置文件遇到错误！"; 
		}
		
		var err;
		prcsxray,err = ..process.popen(corePath,"-c=config.json" );
		if(!prcsxray){
			if( nexCore ){ nexCore.stop(); }
	
			..publish("uiCommand.print",err:"启动 Xray Core 时遇到未知错误!");
			
			if(!..process().isWow64()){
				if(..process.isExe(corePath)!="PE32"){
					..io.remove(corePath);
					if(!..io.exist(corePath)){
						..publish("uiCommand.print","当前操作系统是32位，已删除无效的64位 Xray Core，正在下载32位 Xray Core");
						xrayStarting = false;
						return restart(editor,outbound)	
					}
					else {
						..publish("uiCommand.print","当前操作系统是32位，但是找到的 Xray Core 是64位，请重新下载32位 Xray Core");
					} 
				} 	
			}
			
			xrayStarting = false;
			return;
		}
		prcsxray.assignToJobObject(process.job.limitKill);
		prcsxray.codepage = 65001;	
		prcsxray.logResponse(editor);  
		
		inbounds[1].port = socksProxyPort;
		inbounds[2].port = httpProxPort;
		..config.core.save();
	}
	
	..publish("uiCommand.print","已启动代理服务器，SOCKS端口:" + socksProxyPort + " HTTP端口:" + httpProxPort) 
	..publish("xrayCore.restarted",socksProxyPort,httpProxPort); 
	xrayStarting = false;
	return true;
}

stop = function(){
	..xray.core.ssr.stop();
	
	if(prcsxray){
		prcsxray.terminate();
		prcsxray = null;
	}
	
	..sysProxy.reset(false);

	import xray.github;
   	xray.github.setProxy(false);
}

var getxrayCoreUrl = function(){
	var msgDlg = ..win.dlg.message(..mainForm); 
	var form = msgDlg.create('正在获取 Xray Core 最新版本',,true);
	form.icon = '\uF1D8';
	form.progress.startProgress(50); 
	
	var url,tag = ..win.invoke(function(){
    	import process;
		import curl;
		import web.json;
		
		var http = curl.easy();
		http.setHttpHeader("User-Agent: curl/aardio.curl.easy");
		var response = http.get("https://api.github.com/repos/XTLS/Xray-core/releases");
		http.close();
		if(!response) return;
		var data = web.json.parse(response)
		for(k,v in data){
			// 第一个prerelease不为为false的就是最新的tag
			if (data[k]['prerelease'] == false) {
				tag = data[k]['tag_name']
				break
			}
		}		
		if(!tag) return;
		
		return "https://github.com/XTLS/Xray-core/releases/download/" 
			+ tag + "/xray-windows-" +	(..process().isWow64() ? "64" : "32") + ".zip",tag	
	});
	form.close();
    
	return url,tag;
} 

getPath = function(hwnd){
	var path = ..io.fullpath("/core/xray/xray.exe");
	if(..io.exist(path)){
		return path;
	}
	
	if(self.lastDownloadingCoreFailed){
		return;
	}
	
	..mainForm.disabled = true; 
	var url,versionTag = getxrayCoreUrl();
	
	if(versionTag){
		..publish("uiCommand.print","Xray Core 最新版本: " + versionTag);
	}
	
	if(!url) {
		..publish("uiCommand.print","请下载 Xray Core 到以下路径:");
		..publish("uiCommand.print",path);
		
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		return null;
	}
	
	// 全局代理的情况下，不使用加速节点
	if(..config.proxy.mode != "proxy"){
		var msgDlg = ..win.dlg.message(..mainForm); 
		var form = msgDlg.create('正在查询 Github 加速地址',,true);
		form.icon = '\uF1D8';
		form.progress.startProgress(50); 
	
		url = ..win.invoke(function(url){
			import xray.githubMirror;
			return xray.githubMirror.getMirrorUrl(url);
		},url);
		form.close();	
		..publish("uiCommand.print","Github加速地址:");
		..publish("uiCommand.print",url);
	}
	
	
	import zlib.httpFile;
	if( ..zlib.httpFile.download(url,"正在下载 Xray Core"
		,..io.fullpath("/download/")
		,..io.fullpath("/core/xray/"),,..mainForm.hwnd) ){
			
		self.lastDownloadingCoreFailed = null;
		..mainForm.disabled = false;
		..config.core.xrayVersion = versionTag;
		return ..io.exist(path);
	}
	else {
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		
		..publish("uiCommand.print","请到以下网址下载 Xray Core:");
		..publish("uiCommand.print",url);
		
		..publish("uiCommand.print","下载后请解压到以下目录内:");
		..publish("uiCommand.print",..io.fullpath("/core/xray/"));
	}  
} 

getCoreDir = function(hwnd){
	return ..io.fullpath("/core/xray/");
} 

updateCore = function(){
    ..mainForm.disabled = true; 
    
	var coreDir = getCoreDir();
	var url,versionTag = getxrayCoreUrl();
	if(!url){		
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		return null;
	}
	
	// 如果已是最新版本，则不下载
	var path = ..io.fullpath("/core/xray/xray.exe");
	if(versionTag == ..config.core.xrayVersion && ..io.exist(path)){
		// true表示已经是最新版
		return versionTag,true;
	}
	
		
	// 全局代理的情况下，不使用加速节点
	if(..config.proxy.mode != "proxy"){
		var msgDlg = ..win.dlg.message(..mainForm); 
		var form = msgDlg.create('正在查询 Github 加速地址',,true);
		form.icon = '\uF1D8';
		form.progress.startProgress(50); 
	
		url = ..win.invoke(function(url){
			import xray.githubMirror;
			return xray.githubMirror.getMirrorUrl(url);
		},url);
		form.close();
		..publish("uiCommand.print","Github加速地址:");
		..publish("uiCommand.print",url);	
	}
	  
	import fsys;
	fsys.delete( ..io.fullpath("/temp/xray/") );
	 
	
	import zlib.httpFile;
	if( ..zlib.httpFile.download(url,"正在下载 Xray Core，版本：" + versionTag
		,..io.fullpath("/download/")
		,..io.fullpath("/temp/xray/"),,..mainForm.hwnd) ){
			..mainForm.disabled = false;
			
			if(..io.exist(..io.fullpath("/temp/xray/xray.exe"))){
				import sysProxy;
				sysProxy.reset(false);

				import process.file;
				process.file.terminate(..io.joinpath(coreDir,"xray.exe")); 
				
				..io.createDir(coreDir); 
				fsys.copy(..io.fullpath("/temp/xray/xray.exe"),..io.joinpath(coreDir,"xray.exe")); 
				
				self.lastDownloadingCoreFailed = null;
				// 更新完成后再写入新版本tag
				..config.core.xrayVersion = versionTag;
				..config.core.save();
				return versionTag,false;
			} 
			else {
				self.lastDownloadingCoreFailed = true;
			} 
	}
	else {
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true; 
	}
}

/**intellisense(xray.core)
socksProxyPort = SOCKS代理端口
httpProxPort = HTTP代理端口
isInboundPortChanged() = 是否已变更代理端口配置
restart(.(editor,outbound) = 重新启动 xray 服务进程
lastDownloadingCoreFailed = 上次下载 Core 是否失败,如果希望重新下载请重新赋值为 null
getPath( = 获取xray core路径。如果没有的话，就从网络下载，\n并打印日志到文件句柄指定的界面编辑器
getPath(.(hwnd) = 编辑器句柄
getxrayCoreUrl( = 获取xray core最新版下载地址
isInboundPortChanged() = 判断入站端口是否被修改
end intellisense**/
