//naive 内核进程（NaïveProxy）
import fsys;
import wsock.tcp.server;
import process.popen;
import config;

namespace xray.core.naive;

var prcsNaive;
import process.job.limitKill;
restart = function(editor,outbound,naiveSocksPort){
 
	if(prcsNaive){
		prcsNaive.terminate();
		prcsNaive = null;
	}

	var corePath = getPath(editor.hwnd);
	if(!corePath){ return false,"启动失败,未找到 naive.exe"; } 

	var extraHeaders=null;
	if(outbound.headers){
		extraHeaders = ..web.joinHeaders(outbound.headers);
		if(extraHeaders){
			extraHeaders = "--extra-headers=" + extraHeaders;
		}
	}
	
	var urlInfo = {
		host = outbound.address;
		port = outbound.port;
		scheme = outbound.network; 
	}
	
	if(outbound.id){
		var u,p = ..string.match(outbound.id,"([^\:]+)\:([^\:]+)")
		if(u && p){
			urlInfo.user = u;
			urlInfo.password = p;
		}
		else {
			urlInfo.user = outbound.id;
		} 
	}  
	
	var err;
	prcsNaive,err = ..process.popen(corePath
		,"--listen=socks://127.0.0.1:"+naiveSocksPort
		,"--proxy="+ ..inet.url.stringify(urlInfo)
		,extraHeaders
		);

	if(!prcsNaive){
		..publish("uiCommand.print",err:"启动 NaïveProxy Core 时遇到未知错误!");  
		return;
	}
	else{
		..publish("uiCommand.print","NaïveProxy Core 已启动，端口:" + naiveSocksPort);  
	}
	prcsNaive.assignToJobObject(process.job.limitKill);
	prcsNaive.codepage = 65001;	
	prcsNaive.logResponse(editor); 
	 
	return true;
}

stop = function(){
	if(prcsNaive){
		prcsNaive.terminate();
		prcsNaive = null;
	} 
}

var getNaiveCoreUrl = function(){
    var msgDlg = ..win.dlg.message(..mainForm); 
	var form = msgDlg.create('正在获取 NaïveProxy 最新版本',,true)
	form.icon = '\uF1D8';
	form.progress.startProgress(50); 
	
	var url,versionTag = ..win.invoke(function(){
    	import process;
		import curl;
		import web.json;
		
		var http = curl.easy();
		http.setHttpHeader("User-Agent: curl/aardio.curl.easy");
		var response = http.get("https://api.github.com/repos/klzgrad/naiveproxy/releases");
		http.close();
		if(!response) return;
		var data = web.json.parse(response)
		for(k,v in data){
			// 第一个prerelease不为为false的就是最新的tag
			if (data[k]['prerelease'] == false) {
				tag = data[k]['tag_name']
				break
			}
		}		
		if(!tag) return;
		
		return "https://github.com/klzgrad/naiveproxy/releases/download/" 
			+ tag + "/naiveproxy-"+tag+"-win-" +	(..process().isWow64() ? "x64" : "x86") + ".zip",tag	
	});

	form.close();
	
	return url,versionTag; 
}

downloadCore = function(){
	..mainForm.disabled = true;

	var url,versionTag = getNaiveCoreUrl();
	if(versionTag){
		..publish("uiCommand.print","Xray Core 最新版本: " + versionTag);
	}
	
	var coreDir = getCoreDir();
	if(!url) {
		..publish("uiCommand.print","请下载 NaïveProxy 解压到以下目录内:");
		..publish("uiCommand.print",coreDir);
		
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		return null;
	}
	
	// 全局代理的情况下，不使用加速节点
	if(..config.proxy.mode != "proxy"){
		var msgDlg = ..win.dlg.message(..mainForm); 
		var form = msgDlg.create('正在查询 Github 加速地址',,true);
		form.icon = '\uF1D8';
		form.progress.startProgress(50); 
	
		url = ..win.invoke(function(url){
			import xray.githubMirror;
			return xray.githubMirror.getMirrorUrl(url);
		},url);
		form.close();
		..publish("uiCommand.print","Github加速地址:");
		..publish("uiCommand.print",url);	
	}
	
	import zlib.httpFile;
	if( ..zlib.httpFile.download(url,"正在下载 NaïveProxy " 
		,..io.fullpath("/download/naive")
		,coreDir,,..mainForm.hwnd) ){

		..fsys.enum( coreDir, "naive.exe",
			function(dir,filename,fullpath,findData){ 
				if(filename){  
					..fsys.copy(fullpath,..io.joinpath(coreDir, "naive.exe") )
					..fsys.delete( ..fsys.getParentDir(fullpath) )
					return false;
				}
			} 
		);
			
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = null;
		..config.core.naiveVersion = versionTag;
		return ..io.exist(..io.joinpath(coreDir,"naive.exe"));
	}
	else {
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		
		..publish("uiCommand.print","请到以下网址下载 NaïveProxy:");
		..publish("uiCommand.print",url);
		
		..publish("uiCommand.print","下载后请解压到以下目录内:");
		..publish("uiCommand.print",coreDir); 
	} 	
}
 
 
getPath = function(hwnd){
	var path = ..io.fullpath("/core/naive/naive.exe");
	if(..io.exist(path)){
		return path;
	}
	
	if(self.lastDownloadingCoreFailed){
		return;
	}

	return downloadCore();
} 

getCoreDir = function(hwnd){		
	return ..io.fullpath("/core/naive/");
} 

updateCore = function(){
  	..mainForm.disabled = true; 
  	
	var coreDir = getCoreDir(); 
	var url,versionTag = getNaiveCoreUrl();
	if(!url){		
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		return null;
	}
	
	// 如果已是最新版本，则不下载
	var path = ..io.fullpath("/core/naive/naive.exe");
	if(versionTag == ..config.core.naiveVersion && ..io.exist(path)){
		return versionTag,true;
	}
	
	// 全局代理的情况下，不使用加速节点
	if(..config.proxy.mode != "proxy"){
		var msgDlg = ..win.dlg.message(..mainForm); 
		var form = msgDlg.create('正在查询 Github 加速地址',,true);
		form.icon = '\uF1D8';
		form.progress.startProgress(50); 
	
		url = ..win.invoke(function(url){
			import xray.githubMirror;
			return xray.githubMirror.getMirrorUrl(url);
		},url);
		form.close();
		..publish("uiCommand.print","Github加速地址:");
		..publish("uiCommand.print",url);	
	}
	
	import fsys;
	fsys.delete(..io.fullpath("/temp/naive/"))
 
	import zlib.httpFile;
	if( ..zlib.httpFile.download(url,"正在下载 NaïveProxy，版本：" + versionTag
		,..io.fullpath("/download/naive/")
		,..io.fullpath("/temp/naive/"),,..mainForm.hwnd) ){
			..mainForm.disabled = false;
			
			var naivePath;
			fsys.enum( ..io.fullpath("/temp/naive/"), "naive.exe",
				function(dir,filename,fullpath,findData){ 
					if(filename){ 
			           	naivePath = fullpath; 
			           	return false;
					}
				} 
			);
			
			if(naivePath){
				import sysProxy;
				sysProxy.reset(false);

				import process.file;
				process.file.terminate(..io.joinpath(coreDir,"naive.exe")); 
				
				..io.createDir(coreDir);  
				fsys.copy(naivePath,..io.joinpath(coreDir,"naive.exe"));  
				
				// 更新完成后再写入新版本tag
				..config.core.naiveVersion = versionTag;
				..config.core.save();
				return versionTag,false;
			} 
			else {
				self.lastDownloadingCoreFailed = true;
			} 
	}
	else {
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true; 
	}  
}

/**intellisense(xray.core.naive) 
restart(.(editor,outbound) = 重启启动 NaïveProxy 服务进程
lastDownloadingCoreFailed = 上次下载 Core 是否失败,如果希望重新下载请重新赋值为 null
end intellisense**/

