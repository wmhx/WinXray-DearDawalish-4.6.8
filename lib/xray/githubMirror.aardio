//github 加速节点
namespace xray.githubMirror{
	import config;
	resetgithubMirror = function(){
		config.githubMirror.mirrors = {};
		var githubMirror = config.githubMirror.mirrors;
		..table.push(githubMirror,{"url": "https://cors.isteed.cc/"});
		..table.push(githubMirror,{"url": "https://hub.gitmirror.com/"});
		..table.push(githubMirror,{"url": "https://ghproxy.com/"});
		..table.push(githubMirror,{"url": "https://gh.ddlc.top/"});
		..table.push(githubMirror,{"url": "https://gh.con.sh/"});
		..table.push(githubMirror,{"url": "https://ghps.cc/"});
		
		var file = config.githubMirror.file : (..io.joinpath("/config/","t.html"));
		var url = config.githubMirror.url : "https://greasyfork.org/zh-CN/scripts/412245-github-enhancement-high-speed-download";
		
		if(..io.exist(file)){
			import string.html;
			var htmlDoc = string.html( string.load(file) );
			var tables = htmlDoc.queryEles( tagName = "table" );			
			for i,vi  in tables{
				var as = tables[i].queryEles( tagName = "a" ); 	
				for k,vk in as{
					var href = as[k].innerText()
					if(..string.startWith(href,"htt")){
						..table.push(githubMirror,{"url": href});
					}
				}
			}
		}else{
			var download_mirror_file = function(url,file){
				import inet.whttp;
				var http = inet.whttp();				
				var html = http.get(url);
				http.close();
				if(html){ string.save(file, html);}
			}			
			import thread;
			thread.invoke(download_mirror_file,url,file);
		}		
		
		githubMirror = ..table.unique(githubMirror) ; // 去重
		config.githubMirror.url=url;
		config.githubMirror.file=file;
		config.githubMirror.note="可以自定义url，比如加入可用mirrors头来加快下载";
		config.githubMirror.mirrors=githubMirror;
		config.githubMirror.autoAdd = true;
		config.githubMirror.save();
	}
	
	getMirrorUrl = function(url){
		if(!#config.githubMirror.mirrors){
			resetgithubMirror();
		}
	
		var githubMirrors = config.githubMirror.mirrors;
		
		for(mirrorIndex=1;#githubMirrors;1){
			var selectedUrl = githubMirrors[mirrorIndex]['url']
			// 域名必须以 / 结尾
			if(!..string.endWith(selectedUrl,"/",false)){
				selectedUrl = ..string.concat(selectedUrl,"/")
			}
			var mirrorUrl = selectedUrl + url
			// 测试服务器上文件是否存在
			import inet.whttp;
			var whttp = inet.whttp();
			whttp.beginRequest(mirrorUrl);
			var re, status = whttp.send();
			whttp.close();
			if(status === 200){
				return mirrorUrl; 
			}
			
			if(mirrorIndex == #githubMirrors){
					// 兜底返回原始github地址
					return url; 
			}
		}
	}
}

/**intellisense(xray.github)
getMirrorUrl( = 获取github加速url
getMirrorUrl(.(url) = 原始的github url
resetgithubMirror( = 重置github加速节点
end intellisense**/